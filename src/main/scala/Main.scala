package org.amishel.utils

import mainargs.{ParserForClass, arg, main}

object Main {
  @main
  case class Config(@arg(name = "format", doc = "Format of source/target schema validator (e.g. proto|avro|json|ddl)")
                    schemaFormat: String,
                    @arg(name = "source", doc = "Source schema. For file-based formats like protobuf, it is a path to schema file. \n(E.g. for t=proto, a descriptor file generated by protoc compiler)")
                    source: String,
                    @arg(name = "target", doc = "Target schema. For file-based formats like protobuf, it is a path to schema file. \n(E.g. for t=proto, a descriptor file generated by protoc compiler)")
                    target: String,
                    @arg(name = "message", doc = "Optional Message/schema type name in source/target. \nWhen not passed, first message type is used from the protobuf descriptor")
                    messageType: String = "",
                    @arg(name = "out", doc = "Output formatter type. Defaults to console. Current supported are (console, tree,ddl)")
                    outType: String = "console")

  def main(args: Array[String]): Unit = {
    val config = ParserForClass[Config].constructOrExit(args)
    val formatter: SchemaValidationResultFormatter =
      config.outType match {
        case "console" => new ConsoleTreeStringFormatter()
        case "tree" => new TreeStringFormatter()
        case "ddl" => new DDLStringFormatter()
        case _ => throw new Error(s"Unsupported output format ${config.outType}")
      }

    val validator: SchemaValidator = config.schemaFormat match {
      case "proto" => new ProtoSchemaValidator(config.target, config.source, config.messageType, formatter)
      case "ddl" => new DDLSchemaValidator(config.source, config.target, formatter)
      case "json" => new JsonSchemaValidator(config.source, config.target, formatter)
      case "avro" => new AvroSchemaValidator(config.source, config.target, formatter)
      case _ => throw new Error(s"Unsupported schema format ${config.schemaFormat}")
    }

    validator.MergeSchemas()
    println(validator.ResultFormatted())
  }
}